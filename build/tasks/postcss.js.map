{"version":3,"sources":["../../src/tasks/postcss.js"],"names":[],"mappings":";;;;;;;qBAiBwB,WAAW;;oBAjBlB,MAAM;;;;oBACN,MAAM;;;;0BACJ,aAAa;;;;2BACZ,cAAc;;;;8BACX,iBAAiB;;;;;;2BAGpB,cAAc;;;;6BACR,gBAAgB;;;;0BACnB,aAAa;;;;uBACnB,SAAS;;;;;;;;;;AAOX,SAAS,WAAW,CAAE,UAAU,EAAG;AAC9C,QAAM,MAAM,GAAG,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC;AACzC,QAAM,cAAc,GAAG,EAAE,CAAC;AAC1B,QAAI,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;AACvB,sBAAc,CAAC,YAAY,GAAG,wBAAO,OAAO,CAAC,qCAAqC,CAAC,CAAC;KACvF;;AAED,WAAO,YAAM;;;;AAIT,YAAM,UAAU,GAAG,CACf,iCAAe,EACf,6BAAW;AACP,eAAG,EAAE,MAAM,CAAC,KAAK,GAAG,QAAQ,GAAG,MAAM;SACxC,CAAC,EACF,2BAAM,CACT,CAAC;;AAEF,YAAI,MAAM,GAAG,kBAAK,GAAG,CAAC,kBAAK,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAC/D,IAAI,CAAC,8BAAQ,cAAc,CAAC,CAAC,CAC7B,IAAI,CAAE,8BAAQ,UAAU,EAAE;AACvB,eAAG,EAAE,MAAM,CAAC,KAAK,IAAI,KAAK;AAC1B,cAAE,EAAE,kBAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC;SAClD,CAAC,CAAE,CAAC;;AAET,YAAK,MAAM,CAAC,KAAK,EAAG;AAChB,kBAAM,GAAG,MAAM,CACV,IAAI,CAAC,4BAAW,IAAI,CAAC;AAClB,wBAAQ,EAAE,IAAI;aACjB,CAAC,CAAC,CACF,IAAI,CAAC,4BAAW,KAAK,CAAC,IAAI,EAAE;AACzB,0BAAU,EAAE,GAAG,GAAG,kBAAK,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC;aACrD,CAAC,CAAC,CAAC;SACX;;AAED,cAAM,GAAG,MAAM,CAAC,IAAI,CAAC,kBAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;;AAEjD,YAAI,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE;AACzB,mBAAO,MAAM,CAAC,IAAI,CAAC,6BAAO,0BAA0B,CAAC,CAAC,CAAC;SAC1D;;AAED,eAAO,MAAM,CAAC;KACjB,CAAC;CACL","file":"postcss.js","sourcesContent":["import gulp from 'gulp';\nimport path from 'path';\nimport notify from 'gulp-notify';\nimport plumber from 'gulp-plumber';\nimport sourcemaps from 'gulp-sourcemaps';\n\n// PostCSS and plugins\nimport postcss from 'gulp-postcss';\nimport postcssImport from 'postcss-import';\nimport postcssUrl from 'postcss-url';\nimport nano from 'cssnano';\n\n/**\n * Gulp task to process the css files usign PostCSS and cssnext\n * @param  {object} config Global configuration\n * @return {function}       Function task\n */\nexport default function postcssTask( userConfig ) {\n    const config = userConfig || this.config;\n    const plumberOptions = {};\n    if (config.notify.onError) {\n        plumberOptions.errorHandler = notify.onError('PostCSS Error: <%= error.message %>');\n    }\n\n    return () => {\n        /**\n         * TODO: check the sourcemap problems\n         */\n        const processors = [\n            postcssImport(),\n            postcssUrl({\n                url: config.debug ? 'rebase' : 'copy'\n            }),\n            nano()\n        ];\n\n        let stream = gulp.src(path.join(config.sourcePath, config.entryCss))\n            .pipe(plumber(plumberOptions))\n            .pipe( postcss(processors, {\n                map: config.debug || false,\n                to: path.join(config.destPath, config.entryCss)\n            }) );\n\n        if ( config.debug ) {\n            stream = stream\n                .pipe(sourcemaps.init({\n                    loadMaps: true\n                }))\n                .pipe(sourcemaps.write('./', {\n                    sourceRoot: '/' + path.basename(config.sourcePath)\n                }));\n        }\n\n        stream = stream.pipe(gulp.dest(config.destPath));\n\n        if (config.notify.onUpdated) {\n            return stream.pipe(notify('PostCSS Bundle - Updated'));\n        }\n\n        return stream;\n    };\n}\n"]}