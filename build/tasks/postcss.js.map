{"version":3,"sources":["../../src/tasks/postcss.js"],"names":[],"mappings":";;;;;;;qBAewB,WAAW;;oBAflB,MAAM;;;;0BACJ,aAAa;;;;2BACZ,cAAc;;;;8BACX,iBAAiB;;;;;;2BAGpB,cAAc;;;;6BACR,gBAAgB;;;;2BAClB,cAAc;;;;;;;;;;AAOvB,SAAS,WAAW,CAAE,UAAU,EAAG;AAC9C,QAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACvB,QAAM,MAAM,GAAG,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC;AACzC,QAAM,cAAc,GAAG,EAAE,CAAC;AAC1B,QAAI,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;AACvB,sBAAc,CAAC,YAAY,GAAG,wBAAO,OAAO,CAAC,qCAAqC,CAAC,CAAC;KACvF;;;AAGD,QAAI,OAAO,GAAG,MAAM,CAAC,cAAc,CAAC,MAAM,IAAI,EAAE,CAAC;AACjD,WAAO,CAAC,IAAI,CAAC,iCAAe,CAAC,CAAC;AAC9B,WAAO,CAAC,IAAI,CAAC,8BAAY;AACrB,WAAG,EAAE,MAAM,CAAC,UAAU;AACtB,YAAI,EAAE,MAAM,CAAC,QAAQ;AACrB,2BAAmB,EAAE,KAAK;AAC1B,gBAAQ,EAAE,2BAA2B;KACxC,CAAC,CAAC,CAAC;AACJ,QAAI,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE;AAC7B,eAAO,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;KACzD;;AAGD,WAAO,YAAM;AACT,YAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,kBAAK,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAC/D,IAAI,CAAC,8BAAQ,cAAc,CAAC,CAAC,CAC7B,IAAI,CAAE,8BAAQ,OAAO,EAAE;AACpB,eAAG,EAAE,CAAE,MAAM,CAAC,YAAY,AAAC;AAC3B,cAAE,EAAE,kBAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC;SAClD,CAAC,CAAE,CAAC;;AAET,YAAK,CAAE,MAAM,CAAC,YAAY,AAAC,EAAG;AAC1B,kBAAM,GAAG,MAAM,CACV,IAAI,CAAC,4BAAW,IAAI,CAAC;AAClB,wBAAQ,EAAE,IAAI;aACjB,CAAC,CAAC,CACF,IAAI,CAAC,4BAAW,KAAK,CAAC,IAAI,EAAE;AACzB,0BAAU,EAAE,GAAG,GAAG,kBAAK,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC;aACrD,CAAC,CAAC,CAAC;SACX;;AAED,cAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;;AAEjD,YAAI,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE;AACzB,mBAAO,MAAM,CAAC,IAAI,CAAC,6BAAO,0BAA0B,CAAC,CAAC,CAAC;SAC1D;;AAED,eAAO,MAAM,CAAC;KACjB,CAAC;CACL","file":"postcss.js","sourcesContent":["import path from 'path';\nimport notify from 'gulp-notify';\nimport plumber from 'gulp-plumber';\nimport sourcemaps from 'gulp-sourcemaps';\n\n// PostCSS and plugins\nimport postcss from 'gulp-postcss';\nimport postcssImport from 'postcss-import';\nimport postcssCopy from 'postcss-copy';\n\n/**\n * Gulp task to process the css files usign PostCSS and cssnext\n * @param  {object} config Global configuration\n * @return {function}       Function task\n */\nexport default function postcssTask( userConfig ) {\n    const gulp = this.gulp;\n    const config = userConfig || this.config;\n    const plumberOptions = {};\n    if (config.notify.onError) {\n        plumberOptions.errorHandler = notify.onError('PostCSS Error: <%= error.message %>');\n    }\n\n    // PostCSS plugins configuration\n    let plugins = config.postcssPlugins.before || [];\n    plugins.push(postcssImport());\n    plugins.push(postcssCopy({\n        src: config.sourcePath,\n        dest: config.destPath,\n        keepRelativeSrcPath: false,\n        template: '[assetsPath]/[hash].[ext]'\n    }));\n    if (config.postcssPlugins.after) {\n        plugins = plugins.concat(config.postcssPlugins.after);\n    }\n\n\n    return () => {\n        let stream = gulp.src(path.join(config.sourcePath, config.entryCss))\n            .pipe(plumber(plumberOptions))\n            .pipe( postcss(plugins, {\n                map: !(config.isProduction),\n                to: path.join(config.destPath, config.entryCss)\n            }) );\n\n        if ( !(config.isProduction) ) {\n            stream = stream\n                .pipe(sourcemaps.init({\n                    loadMaps: true\n                }))\n                .pipe(sourcemaps.write('./', {\n                    sourceRoot: '/' + path.basename(config.sourcePath)\n                }));\n        }\n\n        stream = stream.pipe(gulp.dest(config.destPath));\n\n        if (config.notify.onUpdated) {\n            return stream.pipe(notify('PostCSS Bundle - Updated'));\n        }\n\n        return stream;\n    };\n}\n"]}