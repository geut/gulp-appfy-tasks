{"version":3,"sources":["../../src/tasks/browserify.js"],"names":[],"mappings":";;;;;;;qBAkBwB,cAAc;;0BAlBf,YAAY;;;;wBACd,UAAU;;;;2BACP,cAAc;;;;0BACnB,aAAa;;;;6BACV,gBAAgB;;;;iCACnB,qBAAqB;;;;oBACvB,MAAM;;;;0BACJ,aAAa;;;;wBACf,WAAW;;;;qCACP,yBAAyB;;;;8BACvB,iBAAiB;;;;2BACrB,cAAc;;;;;;;;;;AAOlB,SAAS,cAAc,CAAE,UAAU,EAAG;AACjD,QAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACvB,QAAM,MAAM,GAAG,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC;AACzC,QAAI,aAAa,YAAA,CAAC;AAClB,QAAK,MAAM,CAAC,MAAM,CAAC,OAAO,EAAG;AACzB,qBAAa,GAAG,wBAAO,OAAO,CAAE,wCAAwC,CAAE,CAAC;KAC9E,MAAM;AACH,qBAAa,GAAG,UAAC,GAAG,EAAK;AACrB,kCAAK,GAAG,CAAC,sBAAK,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;SACnD,CAAC;KACL;;;;;;;AAOD,aAAS,gBAAgB,CAAE,OAAO,EAAG;AACjC,YAAK,MAAM,CAAC,YAAY,EAAG;AACvB,mBAAO,CAAC,MAAM,oCAAU,CAAC;SAC5B;;AAED,YAAI,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CACxB,EAAE,CAAE,OAAO,EAAE,aAAa,CAAE,CAC5B,IAAI,CAAE,oCAAQ,UAAU,CAAE,CAAE,CAAC;;AAElC,YAAK,CAAE,MAAM,CAAC,YAAY,AAAC,EAAG;;AAE1B,kBAAM,GAAG,MAAM,CAAC,IAAI,CAAC,+BAAQ,CAAC,CACzB,IAAI,CAAC,4BAAW,IAAI,CAAC;AAClB,wBAAQ,EAAE,IAAI;aACjB,CAAC,CAAC,CACF,IAAI,CAAC,4BAAW,KAAK,CAAC,IAAI,EAAE;AACzB,0BAAU,EAAE,GAAG;aAClB,CAAC,CAAC,CAAC;SACX,MAAM;AACH,kBAAM,GAAG,MAAM,CAAC,IAAI,CAAE,gCAAW,8BAAQ,CAAE,CAAE,CAAC;SACjD;;AAED,cAAM,GAAG,MAAM,CAAC,IAAI,CAAE,IAAI,CAAC,IAAI,CAAE,MAAM,CAAC,QAAQ,CAAE,CAAE,CAAC;;AAErD,YAAK,MAAM,CAAC,MAAM,CAAC,SAAS,EAAG;AAC3B,mBAAO,MAAM,CAAC,IAAI,CAAE,6BAAQ,6BAA6B,CAAE,CAAE,CAAC;SACjE;;AAED,eAAO,MAAM,CAAC;KACjB;;AAED,WAAO,YAAM;AACT,YAAI,OAAO,GAAG,6BAAY;AACtB,mBAAO,EAAE,kBAAK,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,OAAO,CAAC;AACrD,iBAAK,EAAE,CAAE,MAAM,CAAC,YAAY,AAAC;SAChC,CAAE,CAAC;;AAEJ,YAAK,MAAM,CAAC,QAAQ,EAAG;AACnB,mBAAO,GAAG,2BAAU,OAAO,CAAE,CAAC;;AAE9B,mBAAO,CAAC,EAAE,CAAE,QAAQ,EAAE,YAAM;AACxB,gCAAgB,CAAE,OAAO,CAAE,CACtB,IAAI,CAAE,yBAAY,MAAM,CAAE;AACvB,0BAAM,EAAE,IAAI;iBACf,CAAE,CAAE,CAAC;aACb,CAAC,CAAC;SACN;;AAED,eAAO,gBAAgB,CAAE,OAAO,CAAE,CAAC;KACtC,CAAC;CACL","file":"browserify.js","sourcesContent":["import browserify from 'browserify';\nimport watchify from 'watchify';\nimport browserSync from 'browser-sync';\nimport uglify from 'gulp-uglify';\nimport streamify from 'gulp-streamify';\nimport source from 'vinyl-source-stream';\nimport path from 'path';\nimport notify from 'gulp-notify';\nimport util from 'gulp-util';\nimport collapse from 'bundle-collapser/plugin';\nimport sourcemaps from 'gulp-sourcemaps';\nimport buffer from 'vinyl-buffer';\n\n/**\n * Gulp task to run browserify over config.entryJs\n * @param  {object} config Global configuration\n * @return {function}        Function task\n */\nexport default function browserifyTask( userConfig ) {\n    const gulp = this.gulp;\n    const config = userConfig || this.config;\n    let onBundleError;\n    if ( config.notify.onError ) {\n        onBundleError = notify.onError( 'Browserify Error: <%= error.message %>' );\n    } else {\n        onBundleError = (err) => {\n            util.log(util.colors.red('Error'), err.message);\n        };\n    }\n\n    /**\n     * Function to run the Browserify Bundler over pipes\n     * @param  {object} bundler Bundler object\n     * @return {object} stream  Gulp stream\n     */\n    function browserifyBundle( bundler ) {\n        if ( config.isProduction ) {\n            bundler.plugin(collapse);\n        }\n\n        let stream = bundler.bundle()\n            .on( 'error', onBundleError )\n            .pipe( source( 'index.js' ) );\n\n        if ( !(config.isProduction) ) {\n            // source map external\n            stream = stream.pipe(buffer())\n                .pipe(sourcemaps.init({\n                    loadMaps: true\n                }))\n                .pipe(sourcemaps.write('./', {\n                    sourceRoot: '/'\n                }));\n        } else {\n            stream = stream.pipe( streamify( uglify() ) );\n        }\n\n        stream = stream.pipe( gulp.dest( config.destPath ) );\n\n        if ( config.notify.onUpdated ) {\n            return stream.pipe( notify( 'Browserify Bundle - Updated' ) );\n        }\n\n        return stream;\n    }\n\n    return () => {\n        let bundler = browserify( {\n            entries: path.join(config.sourcePath, config.entryJs),\n            debug: !(config.isProduction)\n        } );\n\n        if ( config.watchify ) {\n            bundler = watchify( bundler );\n\n            bundler.on( 'update', () => {\n                browserifyBundle( bundler )\n                    .pipe( browserSync.reload( {\n                        stream: true\n                    } ) );\n            });\n        }\n\n        return browserifyBundle( bundler );\n    };\n}\n"]}